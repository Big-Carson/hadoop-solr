buildscript {
  repositories {
    jcenter()
  }
  dependencies {
  }
}

plugins {
  id 'com.github.johnrengelman.shadow' version '1.2.4'
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.4.1'
}



ext {
  publishedProjects = subprojects - project(':solr-hadoop-common')
}

subprojects {

  if (project in publishedProjects) {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'project-report'
    apply plugin: 'jacoco'

    repositories {
      mavenLocal()
      jcenter()
      mavenCentral()
    }

    project.configurations {
      hadoop2Compile.extendsFrom(project.configurations.compile)
      hadoop2TestCompile.extendsFrom(project.configurations.testCompile)
      hadoop2TestRuntime.extendsFrom(project.configurations.testRuntime)
      // Ensure that "project()" deps elsewhere still a copy of the hadoop classes
      it."default".extendsFrom(project.configurations.hadoop2Compile)

      hadoop3Compile.extendsFrom(project.configurations.compile)
      hadoop3TestCompile.extendsFrom(project.configurations.testCompile)
      hadoop3TestRuntime.extendsFrom(project.configurations.testRuntime)
    }

    gradle.projectsEvaluated {
      tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
      }
    }

    task testHadoop2(type: Test) {
      classpath = configurations.hadoop2TestRuntime + sourceSets.main.output + sourceSets.test.output
      reports.html.destination = file("$buildDir/reports/tests/hadoop2")
      reports.junitXml.destination = file("$buildDir/test-results/hadoop2")
    }

    task testHadoop3(type: Test) {
      classpath = configurations.hadoop3TestRuntime + sourceSets.main.output + sourceSets.test.output
      reports.html.destination = file("$buildDir/reports/tests/hadoop3")
      reports.junitXml.destination = file("$buildDir/test-results/hadoop3")
    }

    test {
      actions = []
      dependsOn 'testHadoop2'
      dependsOn 'testHadoop3'
    }

    compileTestJava {
      classpath = configurations.hadoop2TestCompile + sourceSets.main.output
    }

    compileJava {
      classpath = configurations.hadoop2Compile
    }

    jacocoTestReport {
      reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/jacocoHtml"
      }
      afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
          fileTree(dir: it,
              exclude: ['**/**/lemurproject/**'])
        })
      }
    }

    publishing {
      publications {
        core(MavenPublication) {
          from components.java
        }
      }
    }

    task dist(dependsOn: "publishToMavenLocal") {
    }
  }
}

project('solr-hadoop-core') {

  dependencies {
    compile(project(':solr-hadoop-common:solr-hadoop-io')) {
      transitive = false
    }
    compile("org.apache.solr:solr-commons-csv:3.5.0")
    compile("org.apache.mahout:mahout-mr:${mahoutVersion}") {
      transitive = false
    }
    compile("org.apache.mahout:mahout-hdfs:${mahoutVersion}") {
      transitive = false
    }
    // TODO:check deps
    compile("org.apache.mahout:mahout-math:${mahoutVersion}") {
      transitive = false
    }
    compile("org.apache.mahout:mahout-integration:${mahoutVersion}") {
      transitive = false
    }
    compile("org.apache.mahout.commons:commons-cli:2.0-mahout") {
      transitive = false
    }

    compile("org.apache.solr:solr-solrj:${solrVersion}") {
      exclude group: 'org.apache.hadoop'
    }
    hadoop2Compile("org.apache.hadoop:hadoop-common:${hadoop2Version}@jar")
    hadoop2Compile("org.apache.hadoop:hadoop-client:${hadoop2Version}") { exclude group: 'log4j' exclude group: 'org.slf4j' }
    hadoop2Compile("org.apache.hadoop:hadoop-auth:${hadoop2Version}") { transitive = false }
    hadoop2Compile("org.apache.hadoop:hadoop-mapreduce-client-core:${hadoop2Version}") { transitive = false }
    hadoop2Compile("org.apache.hadoop:hadoop-hdfs:${hadoop2Version}@jar") { transitive = false }

    hadoop3Compile("org.apache.hadoop:hadoop-common:${hadoop3Version}@jar")
    hadoop3Compile("org.apache.hadoop:hadoop-client:${hadoop3Version}") { exclude group: 'log4j' exclude group: 'org.slf4j' }
    hadoop3Compile("org.apache.hadoop:hadoop-auth:${hadoop3Version}") { transitive = false }
    hadoop3Compile("org.apache.hadoop:hadoop-mapreduce-client-core:${hadoop3Version}") { transitive = false }
    hadoop3Compile("org.apache.hadoop:hadoop-hdfs:${hadoop3Version}@jar") { transitive = false }

    compile('org.jruby:jruby-complete:1.7.11')

    compile files('libs/logstash-mapper-with-gems.jar')

    testCompile 'com.carrotsearch.randomizedtesting:junit4-ant:1.4.0'
    testCompile "org.apache.lucene:lucene-analyzers-common:${solrVersion}"
    testCompile 'commons-collections:commons-collections:3.2.2'

    testCompile "org.apache.solr:solr-test-framework:${solrVersion}"
    testCompile 'org.apache.mrunit:mrunit:1.0.0:hadoop2@jar'

    testCompile(project(':solr-hadoop-common:solr-hadoop-testbase'))
  }
}

project('solr-hadoop-job') {

  apply plugin: 'com.github.johnrengelman.shadow'

  shadowJar {
    zip64 true
    mergeServiceFiles()
    classifier = ''
    dependencies {
      exclude(dependency("org.apache.hadoop:.*"))
    }
    relocate 'org.apache.http', 'shaded.org.apache.http'
    relocate 'org.apache.solr', 'shaded.org.apache.solr'

    // Remove unwanted files in root jar (repackaging)
    exclude 'JDOMAbout*.class'
    exclude '.gitkeep'
    exclude '*.txt'
    exclude '*.dtd'
    exclude '*.gif'
    exclude '*.properties'
    exclude '*.xml'
    exclude '*.ico'
    exclude '*.lst'
    exclude '*.css'
    exclude 'NOTICE'
    exclude 'JHIGHLIGHT_VERSION'
    exclude 'LICENSE'
  }
  dependencies {
    compile(project(':solr-hadoop-core'))

    compile(project(':solr-hadoop-common:solr-hadoop-document')) {
      transitive = false
    }

  }

  publishing {
    publications {
      shadow(MavenPublication) {
        from components.shadow
      }
    }
  }
}
